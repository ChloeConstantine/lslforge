module Language.Lsl.Internal.EventSigs(lslEventDescriptors,simpleLslEventDescriptors, EventDelivery(..), EventAdditionalData(..)) where

import Language.Lsl.Internal.Type(LSLType(..))

data EventDelivery = EventDeliveryScript | EventDeliveryPrim | EventDeliveryObject | EventDeliveryRoot
data EventAdditionalData = EventAdditionalKeys String String | EventAdditionalAvatarKeys String String | EventAdditionalVectors String String
                         | EventAdditionalInts String String

lslEventDescriptors = [
    ("at_rot_target", [(LLInteger,"tnum"),(LLRot,"targetRot"),(LLRot,"ourrot")], EventDeliveryScript, [], "raised when a scripted object comes within an angular distance of a target rotation"),
    ("at_target", [(LLInteger,"tnum"),(LLVector,"targetPos"),(LLVector,"ourpos")], EventDeliveryScript, [], "raised when a scripted object comes within a distance of a target posisition"),
    ("attach",[(LLKey,"id")],  EventDeliveryRoot, [], "raised whenever the scripted object becomes attached or detached from an avatar.\nSequence: [state_entry - if hasn't been triggered] > [on_rez] > [attach]."),
    ("changed", [(LLInteger,"change")], EventDeliveryObject, [], "raised whenever one of a variety of changes occur to a prim/object containing the script"),
    ("collision",[(LLInteger, "num_detected")], EventDeliveryPrim, [EventAdditionalKeys "Avatar/Object key" "Avatar/Object key for collision", EventAdditionalInts "Link Number" "Link Source of Collision"], "raised when a scripted object collides with another object/avatar"),
    ("collision_end",[(LLInteger, "num_detected")],  EventDeliveryPrim, [EventAdditionalKeys "Avatar/Object key" "Avatar/Object key for collision", EventAdditionalInts "Link Number" "Link Source of Collision"], "raised when a scripted object stops colliding with another object/avatar"),
    ("collision_start",[(LLInteger, "num_detected")], EventDeliveryPrim, [EventAdditionalKeys "Avatar/Object key" "Avatar/Object key for collision", EventAdditionalInts "Link Number" "Link Source of Collision"], "raised when a scripted object starts colliding with another object/avatar"),
    ("control",[(LLKey,"id"),(LLInteger,"held"),(LLInteger,"change")], EventDeliveryScript, [], "raised when a the state of controls change, if the script has 'taken controls'"),
    ("dataserver",[(LLKey,"queryid"),(LLString,"data")], EventDeliveryScript, [], "raised when data is received from the dataserver (in response to one of a variety of ll-function calls)"),
    ("email",[(LLString,"time"),(LLString,"address"),(LLString,"subj"),(LLString,"message"),(LLInteger,"num_left")], EventDeliveryScript, [], "raised when the llGetNextEmail function call is answered"),
    ("experience_permissions",[(LLKey,"agent_id")], EventDeliveryScript, [], "The agent has approved an experience permissions request. This may be through interaction with the experience permission dialog or the experience profile, or automatically if the agent has previously approved the experience.\nkey agent_id - avatar UUID approving permission"),
    ("experience_permissions_denied",[(LLKey,"agent_id"),(LLInteger,"reason")], EventDeliveryScript, [], "The agent has denied experience permission. \nkey agent_id - avatar UUID that denied permission\ninteger reason - reason for denial; one of XP_ERROR_* error flags\nThis event may be generated by many cases, see wiki"),
    ("final_damage",[(LLInteger,"num_detected")], EventDeliveryScript, [], "Experimental event only available in some testing regions (soon). This event is triggered after all on_damage events in all scripts and attachments have processed and damage has been applied to the avatar or distributed to all seated avatars."),
    ("game_control",[(LLKey,"id"),(LLInteger,"button_levels"),(LLList,"axes")], EventDeliveryScript, [], "Experimental event only available in some testing regions (soon). Triggered when compatible viewer sends fresh GameControlInput message, but only for scripts on attachments or seat."),
    ("http_request",[(LLKey,"request_id"),(LLString,"method"),(LLString,"body")], EventDeliveryScript, [], "raised when an script receives an http request"),
    ("http_response",[(LLKey,"request_id"),(LLInteger,"status"),(LLList,"metadata"),(LLString,"body")], EventDeliveryScript, [], "raised when an http response is received for an http request that is pending"),
    ("land_collision",[(LLVector,"pos")], EventDeliveryPrim, [], "raised when a scripted object is colliding with the ground"),
    ("land_collision_end",[(LLVector,"pos")], EventDeliveryPrim, [], "raised when a scripted object stops colliding with the ground"),
    ("land_collision_start",[(LLVector,"pos")], EventDeliveryPrim, [], "raised when a scripted object starts colliding with the ground"),
    ("link_message", [(LLInteger,"sender_num"), (LLInteger,"num"), (LLString,"str"), (LLKey,"id")], EventDeliveryPrim, [], "raised when a scripted prim receives a link message, sent via llMessageLinked"),
    ("linkset_data", [(LLInteger,"action"), (LLString,"name"), (LLString,"value")], EventDeliveryObject, [], "raised in all scripts in a linkset whenever the datastore has been modified through a call to one of the llLinksetData functions"),
    ("listen", [(LLInteger, "channel"), (LLString,"name"), (LLKey,"id"), (LLString,"message")], EventDeliveryScript, [], "raised whenever 'chat' is detected that matches constraints specified via a llListen call"),
    ("money",[(LLKey,"id"),(LLInteger,"amount")], EventDeliveryPrim, [], "raised when an agent pays a Linden dollar amount to the object"),
    ("moving_end",[], EventDeliveryObject, [], "raised when a scripted object stops moving or has entered a different region"),
    ("moving_start",[], EventDeliveryObject, [], "raised when a scripted object starts moving or has entered a different region"),
    ("no_sensor",[], EventDeliveryScript, [], "raised when sensors are active, but are not sensing anything"),
    ("not_at_rot_target",[],  EventDeliveryScript, [], "raised when a scripted object is outside the specified angular distance of a target set by llRotTarget"),
    ("not_at_target",[], EventDeliveryScript, [], "raised when a scripted object is outside a specified range of a target set by llTarget"),
    ("object_rez",[(LLKey,"id")], EventDeliveryPrim, [], "raised when a script rezzes another object.  The id is the GUID of the object that it rezzed"),
    ("on_damage",[(LLInteger,"num_detected")], EventDeliveryScript, [], "Experimental event only available in some testing regions (soon). This event is triggered when damage has been inflicted on an avatar or task in the world but before damage has been applied or distributed."),
    ("on_death",[], EventDeliveryPrim, [], "This event is triggered on all attachments worn by an avatar when that avatar's health reaches 0"),
    ("on_rez", [(LLInteger,"start_param")], EventDeliveryObject, [], "raised when an object rezzes (from an agents inventory, an objects inventory, or as an attachment when an user logs on).\nSequence: [state_entry - if hasn't been triggered] > [on_rez] > [attach]."),
    ("path_update", [(LLInteger,"type"), (LLList,"reserved")], EventDeliveryObject, [], "Triggered when a pathfinding event occurs"),
    ("remote_data", [(LLInteger,"event_type"),(LLKey,"channel"),(LLKey,"message_id"),(LLString,"sender"),(LLInteger,"idata"),(LLString,"sdata")], EventDeliveryScript, [], "raised when something XML-RPC related happens"),
    ("run_time_permissions", [(LLInteger,"perm")], EventDeliveryScript, [], "raised when permissions granted to a script change, or a user responds to a permission request from the script"),
    ("sensor",[(LLInteger,"num_detected")], EventDeliveryScript, [EventAdditionalKeys "Avatar/Object key" "Sensed Avatar/Ojbect Key"], "raised when the sensor set up by llSensor/llSensorRepeat senses something"),
    ("state_entry", [], EventDeliveryScript, [], "raised when a state is entered.\nSequence: [state_entry - if hasn't been triggered] > [on_rez] > [attach]."),
    ("state_exit", [], EventDeliveryScript, [], "raised when a state is exited"),
    ("timer", [], EventDeliveryScript, [], "raised when the timer set up by llSetTimerEvent triggers"),
    ("touch", [(LLInteger,"num_detected")], EventDeliveryPrim, [EventAdditionalAvatarKeys "Avatar key" "Key of agent touching prim", EventAdditionalVectors "Grab vector" "Force applied by agent grabbing prim", EventAdditionalInts "Link Number" "Link source of touch"],
     "raised when an agent touches a scripted object"),
    ("touch_end",[(LLInteger,"num_detected")], EventDeliveryPrim,[EventAdditionalAvatarKeys "Avatar key" "Key of agent touching prim", EventAdditionalInts "Link Number" "Link source of touch"], "raised when an agent stops touching a scripted object"),
    ("touch_start",[(LLInteger,"num_detected")], EventDeliveryPrim, [EventAdditionalAvatarKeys "Avatar key" "Key of agent touching prim", EventAdditionalInts "Link Number" "Link source of touch"], "raised when an agent starts touching a scripted object"),
    ("transaction_result",[(LLKey,"id"),(LLInteger,"success"),(LLString,"data")], EventDeliveryPrim, [], "triggered when task receives asynchronous data from llTransfer* function(s) call")]

simpleLslEventDescriptors =
    map (\ (name,params,_,_,_) ->
            (name, map fst params)) lslEventDescriptors
